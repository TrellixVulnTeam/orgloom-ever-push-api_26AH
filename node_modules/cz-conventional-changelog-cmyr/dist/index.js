'use strict';

var wrap = require('word-wrap');
var map = require('lodash.map');
var longest = require('longest');
var chalk = require('chalk');
var conventionalCommitTypes = require('conventional-commit-types');
var commitizen = require('commitizen');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var wrap__default = /*#__PURE__*/_interopDefaultLegacy(wrap);
var map__default = /*#__PURE__*/_interopDefaultLegacy(map);
var longest__default = /*#__PURE__*/_interopDefaultLegacy(longest);
var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);
var conventionalCommitTypes__default = /*#__PURE__*/_interopDefaultLegacy(conventionalCommitTypes);

const config$1 = {
    type: {
        description: 'ËØ∑ÈÄâÊã©ÊÇ®Ë¶ÅÊèê‰∫§ÁöÑÊõ¥ÊîπÁ±ªÂûã',
        enum: {
            feat: {
                description: '‰∏Ä‰∏™Êñ∞ÂäüËÉΩ(feature)',
                title: 'Features',
                emoji: '‚ú®',
            },
            fix: {
                description: '‰∏Ä‰∏™ÈîôËØØ‰øÆÂ§ç(bug fix)',
                title: 'Bug Fixes',
                emoji: 'üêõ',
            },
            docs: {
                description: '‰ªÖÊñáÊ°£Êõ¥Êîπ',
                title: 'Documentation',
                emoji: 'üìö',
            },
            style: {
                description: '‰∏çÂΩ±Âìç‰ª£Á†ÅÂê´‰πâÁöÑ‰ª£Á†ÅÊ†∑ÂºèÊõ¥Êîπ(Á©∫Ê†º„ÄÅÊ†ºÂºè„ÄÅÁº∫Â∞ëÂàÜÂè∑Á≠â)',
                title: 'Styles',
                emoji: 'üíé',
            },
            refactor: {
                description: 'Êó¢‰∏ç‰øÆÂ§çÈîôËØØ‰πü‰∏çÊ∑ªÂä†ÂäüËÉΩÁöÑ‰ª£Á†ÅÊõ¥Êîπ(‰ª£Á†ÅÈáçÊûÑ)',
                title: 'Code Refactoring',
                emoji: 'üì¶',
            },
            perf: {
                description: 'ÊèêÈ´òÊÄßËÉΩÁöÑ‰ª£Á†ÅÊõ¥Êîπ',
                title: 'Performance Improvements',
                emoji: 'üöÄ',
            },
            test: {
                description: 'Ê∑ªÂä†Áº∫Â§±ÁöÑÊµãËØïÊàñÁ∫†Ê≠£Áé∞ÊúâÁöÑÊµãËØï',
                title: 'Tests',
                emoji: 'üö®',
            },
            build: {
                description: 'ÂΩ±ÂìçÊûÑÂª∫Á≥ªÁªüÊàñÂ§ñÈÉ®‰æùËµñÈ°πÁöÑÊõ¥Êîπ (Á§∫‰æãËåÉÂõ¥: gulp, broccoli, npm)',
                title: 'Builds',
                emoji: 'üõ†',
            },
            ci: {
                description: 'ÂØπÊàë‰ª¨ÁöÑ CI ÈÖçÁΩÆÊñá‰ª∂ÂíåËÑöÊú¨ÁöÑÊõ¥Êîπ (Á§∫‰æãËåÉÂõ¥: Travis, Circle, BrowserStack, SauceLabs)',
                title: 'Continuous Integrations',
                emoji: '‚öôÔ∏è',
            },
            chore: {
                description: '‰∏ç‰øÆÊîπ src ÊàñÊµãËØïÊñá‰ª∂ÁöÑÂÖ∂‰ªñÊõ¥Êîπ',
                title: 'Chores',
                emoji: '‚ôªÔ∏è',
            },
            revert: {
                description: 'ÂõûÈÄÄ‰πãÂâçÁöÑÊèê‰∫§',
                title: 'Reverts',
                emoji: 'üóë',
            },
        },
    },
    scope: {
        description: 'Ê≠§Êõ¥ÊîπÁöÑËåÉÂõ¥ÊòØ‰ªÄ‰πà(‰æãÂ¶ÇÁªÑ‰ª∂ÊàñÊñá‰ª∂Âêç): (Êåâ Enter ÈîÆË∑≥Ëøá)',
    },
    subject: {
        description: 'ÂØπÂèòÂåñÂÜô‰∏Ä‰∏™ÁÆÄÁü≠ÁöÑ„ÄÅÂëΩ‰ª§ÂºèÁöÑÊèèËø∞:\n',
    },
    body: {
        description: 'Êèê‰æõÊõ¥ËØ¶ÁªÜÁöÑÊõ¥ÊîπÊèèËø∞: (Êåâ Enter ÈîÆË∑≥Ëøá)\n',
    },
    isBreaking: {
        description: 'ÊòØÂê¶Êúâ‰ªª‰ΩïÁ†¥ÂùèÊÄßÂèòÂåñ(BREAKING CHANGE)?',
    },
    breakingBody: {
        description: '‰∏Ä‰∏™ BREAKING CHANGE Êèê‰∫§ÈúÄË¶Å‰∏Ä‰∏™ body„ÄÇËØ∑ËæìÂÖ•ÂØπÊèê‰∫§Êú¨Ë∫´ÁöÑÊõ¥ÈïøÊèèËø∞:\n',
    },
    breaking: {
        description: 'ÊèèËø∞Á†¥ÂùèÊÄßÂèòÂåñ:\n',
    },
    isIssueAffected: {
        description: 'Ê≠§Êõ¥Êîπ‰ºöÂΩ±Âìç‰ªª‰ΩïÊú™Ëß£ÂÜ≥ÁöÑ issues Âêó?',
    },
    issuesBody: {
        description: 'Â¶ÇÊûú issues Â∑≤ÂÖ≥Èó≠ÔºåÂàôÊèê‰∫§ÈúÄË¶Å‰∏Ä‰∏™‰∏ª‰Ωì„ÄÇËØ∑ËæìÂÖ•ÂØπÊèê‰∫§Êú¨Ë∫´ÁöÑÊõ¥ÈïøÊèèËø∞:\n',
    },
    issues: {
        description: 'Ê∑ªÂä†ÈóÆÈ¢òÂèÇËÄÉ (‰æãÂ¶Ç "fix #123", "re #123".):\n',
    },
};

const filter = function (array) {
    return array.filter((x) => x);
};
const headerLength = function (answers) {
    return (answers.type.length + 2 + (answers.scope ? answers.scope.length + 2 : 0));
};
const maxSummaryLength = function (options, answers) {
    return options.maxHeaderWidth - headerLength(answers);
};
const filterSubject = function (subject, disableSubjectLowerCase) {
    subject = subject.trim();
    if (!disableSubjectLowerCase && subject.charAt(0).toLowerCase() !== subject.charAt(0)) {
        subject =
            subject.charAt(0).toLowerCase() + subject.slice(1, subject.length);
    }
    while (subject.endsWith('.')) {
        subject = subject.slice(0, subject.length - 1);
    }
    return subject;
};
// This can be any kind of SystemJS compatible module.
// We use Commonjs here, but ES6 or AMD would do just
// fine.
function engine (options) {
    const types = options.types;
    const length = longest__default["default"](Object.keys(types)).length + 1;
    const choices = map__default["default"](types, (type, key) => ({
        name: `${`${key}:`.padEnd(length)} ${type.description}`,
        value: key,
    }));
    return {
        // When a user runs `git cz`, prompter will
        // be executed. We pass you cz, which currently
        // is just an instance of inquirer.js. Using
        // this you can ask questions and get answers.
        //
        // The commit callback should be executed when
        // you're ready to send back a commit template
        // to git.
        //
        // By default, we'll de-indent your commit
        // template and will keep empty lines.
        prompter(cz, commit) {
            // Let's ask some questions of the user
            // so that we can populate our commit
            // template.
            //
            // See inquirer.js docs for specifics.
            // You can also opt to use another input
            // collection library if you prefer.
            cz.prompt([
                {
                    type: 'list',
                    name: 'type',
                    message: config$1.type.description,
                    choices,
                    default: options.defaultType,
                },
                {
                    type: 'input',
                    name: 'scope',
                    message: config$1.scope.description,
                    default: options.defaultScope,
                    filter(value) {
                        return options.disableScopeLowerCase
                            ? value.trim()
                            : value.trim().toLowerCase();
                    },
                },
                {
                    type: 'input',
                    name: 'subject',
                    message(answers) {
                        return (`${config$1.subject.description} (ÊúÄÂ§ö ${maxSummaryLength(options, answers)} ‰∏™Â≠óÁ¨¶):\n`);
                    },
                    default: options.defaultSubject,
                    validate(subject, answers) {
                        const filteredSubject = filterSubject(subject, options.disableSubjectLowerCase);
                        // eslint-disable-next-line no-nested-ternary
                        return filteredSubject.length === 0
                            ? 'subject ÊòØÂøÖÈ°ªÁöÑ'
                            : filteredSubject.length <= maxSummaryLength(options, answers)
                                ? true
                                : `subject ÈïøÂ∫¶ÂøÖÈ°ªÂ∞è‰∫éÊàñÁ≠â‰∫é ${maxSummaryLength(options, answers)} ‰∏™Â≠óÁ¨¶. ÂΩìÂâçÈïøÂ∫¶‰∏∫ ${filteredSubject.length} ‰∏™Â≠óÁ¨¶.`;
                    },
                    transformer(subject, answers) {
                        const filteredSubject = filterSubject(subject, options.disableSubjectLowerCase);
                        const color = filteredSubject.length <= maxSummaryLength(options, answers)
                            ? chalk__default["default"].green
                            : chalk__default["default"].red;
                        return color(`(${filteredSubject.length}) ${subject}`);
                    },
                    filter(subject) {
                        return filterSubject(subject, options.disableSubjectLowerCase);
                    },
                },
                {
                    type: 'input',
                    name: 'body',
                    message: config$1.body.description,
                    default: options.defaultBody,
                },
                {
                    type: 'confirm',
                    name: 'isBreaking',
                    message: config$1.isBreaking.description,
                    default: false,
                },
                {
                    type: 'input',
                    name: 'breakingBody',
                    default: '-',
                    message: config$1.breakingBody.description,
                    when(answers) {
                        return answers.isBreaking && !answers.body;
                    },
                    validate(breakingBody) {
                        return (breakingBody.trim().length > 0 ||
                            'BREAKING CHANGE ÂøÖÈ°ªË¶ÅÂ°´ÂÜô body!');
                    },
                },
                {
                    type: 'input',
                    name: 'breaking',
                    message: config$1.breaking.description,
                    when(answers) {
                        return answers.isBreaking;
                    },
                },
                {
                    type: 'confirm',
                    name: 'isIssueAffected',
                    message: config$1.isIssueAffected.description,
                    default: !!options.defaultIssues,
                },
                {
                    type: 'input',
                    name: 'issuesBody',
                    default: '-',
                    message: config$1.issuesBody.description,
                    when(answers) {
                        return (answers.isIssueAffected && !answers.body && !answers.breakingBody);
                    },
                },
                {
                    type: 'input',
                    name: 'issues',
                    message: config$1.issues.description,
                    when(answers) {
                        return answers.isIssueAffected;
                    },
                    default: options.defaultIssues ? options.defaultIssues : undefined,
                },
            ]).then((answers) => {
                const wrapOptions = {
                    trim: true,
                    cut: false,
                    newline: '\n',
                    indent: '',
                    width: options.maxLineWidth,
                };
                // parentheses are only needed when a scope is present
                const scope = answers.scope ? `(${answers.scope})` : '';
                // Hard limit this line in the validate
                const head = `${answers.type + scope}: ${answers.subject}`;
                // Wrap these lines at options.maxLineWidth characters
                const body = answers.body ? wrap__default["default"](answers.body, wrapOptions) : false;
                // Apply breaking change prefix, removing it if already present
                let breaking = answers.breaking ? answers.breaking.trim() : '';
                breaking = breaking
                    ? `BREAKING CHANGE: ${breaking.replace(/^BREAKING CHANGE: /, '')}`
                    : '';
                breaking = breaking ? wrap__default["default"](breaking, wrapOptions) : false;
                const issues = answers.issues ? wrap__default["default"](answers.issues, wrapOptions) : false;
                commit(filter([head, body, breaking, issues]).join('\n\n'));
            });
        },
    };
}

const config = commitizen.configLoader.load() || {};
const options = {
    types: config.types || config$1.type.enum || conventionalCommitTypes__default["default"].types,
    defaultType: process.env.CZ_TYPE || config.defaultType,
    defaultScope: process.env.CZ_SCOPE || config.defaultScope,
    defaultSubject: process.env.CZ_SUBJECT || config.defaultSubject,
    defaultBody: process.env.CZ_BODY || config.defaultBody,
    defaultIssues: process.env.CZ_ISSUES || config.defaultIssues,
    disableScopeLowerCase: process.env.DISABLE_SCOPE_LOWERCASE || config.disableScopeLowerCase,
    disableSubjectLowerCase: process.env.DISABLE_SUBJECT_LOWERCASE || config.disableSubjectLowerCase,
    maxHeaderWidth: process.env.CZ_MAX_HEADER_WIDTH &&
        parseInt(process.env.CZ_MAX_HEADER_WIDTH) ||
        config.maxHeaderWidth ||
        100,
    maxLineWidth: process.env.CZ_MAX_LINE_WIDTH &&
        parseInt(process.env.CZ_MAX_LINE_WIDTH) ||
        config.maxLineWidth ||
        100,
};
try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const commitlintLoad = require('@commitlint/load');
    commitlintLoad().then((clConfig) => {
        if (clConfig.rules) {
            const maxHeaderLengthRule = clConfig.rules['header-max-length'];
            if (typeof maxHeaderLengthRule === 'object' &&
                maxHeaderLengthRule.length >= 3 &&
                !process.env.CZ_MAX_HEADER_WIDTH &&
                !config.maxHeaderWidth) {
                options.maxHeaderWidth = maxHeaderLengthRule[2];
            }
        }
    });
}
catch (error) {
    //
}
module.exports = engine(options);
